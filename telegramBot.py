from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage


from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from config import TOKEN

from googleapiclient.discovery import build

from bs4 import BeautifulSoup
import time
import datetime


class Search(StatesGroup):
    my_search = State()
    new_video = State()
    popular_video = State()
    test = State()


# Inline_Keyboard
search_button = InlineKeyboardButton('–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ  üîé', callback_data='–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ')
new_video = InlineKeyboardButton('–ù–æ–≤–∏–Ω–∫–∏ üíé', callback_data='–ù–æ–≤–∏–Ω–∫–∏')
popular_video = InlineKeyboardButton('–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ üî•', callback_data='–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ')
support_me = InlineKeyboardButton('–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å üí∞', callback_data='–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å')
search_keyboard = InlineKeyboardMarkup().add(search_button, new_video, popular_video, support_me)
# Payment_Keyboard
my_paypal = InlineKeyboardButton('PayPal', callback_data='PayPal')
Youmoney = InlineKeyboardButton('–ÆMoney', callback_data='–ÆMoney')
payment_keyboard = InlineKeyboardMarkup().add(my_paypal, Youmoney)


# bot
bot = Bot(token=TOKEN)
dp = Dispatcher(bot=bot, storage=MemoryStorage())


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer(f'–•–∞–π, {message.from_user.first_name} ü§ö\n'
                         '–•–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –ª—é–±–æ–µ –≤–∏–¥–µ–æ üé¨\n'
                         '–¢–æ–≥–¥–∞ –±—ã—Å—Ç—Ä–µ–µ –∂–º–∏ –Ω–∞ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É üòâ', reply_markup=search_keyboard)


@dp.callback_query_handler(lambda c: c.data == '–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ')
async def search_begin(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '\n'
                                                        '–ù–∞–ø–∏—à–∏ –ª—é–±–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ, –∏ —è –Ω–∞—á–Ω—É –ø–æ–∏—Å–∫ üîé',)

    await Search.my_search.set()

    @dp.message_handler(state=Search.my_search)
    async def search_video_1(msg: types.Message, state: FSMContext):
        get_search = msg.text

        await state.update_data(my_search=get_search)
        data = await state.get_data()
        find_search = data.get('my_search')

        file_path = 'C:/Users/Admin/PycharmProjects/YouTubeArt/ArtYoutubeVideo'

        api_key = 'AIzaSyBXEyhLdBF9n1vTFg7mQPD-M4Zxk_RS-hI'
        youtube = build('youtube', 'v3', developerKey=api_key)
        try:

            request_search = youtube.search().list(
                part='snippet',
                q=find_search,
                order='relevance',
                type='video',
                maxResults='1'

            )

            response_search_video = request_search.execute()

            save_id_videos = []

            info_video = {}

            for all_video_get in response_search_video['items']:
                find_id_video = (all_video_get['id']['videoId'])
                save_id_videos.append(find_id_video)

                find_title_video = (all_video_get['snippet']['title'])
                info_video['Title:'] = find_title_video

                find_description_video = (all_video_get['snippet']['description'])
                info_video['Description:'] = find_description_video

                find_published_video = (all_video_get['snippet']['publishedAt'])
                datetime_youtube = datetime.datetime.strptime(find_published_video, '%Y-%m-%dT%H:%M:%SZ')
                date_time_telegram = str(datetime_youtube)
                info_video['Published:'] = date_time_telegram

            request_find_video = youtube.videos().list(
                part='player',
                id=save_id_videos
            )

            response_find_video = request_find_video.execute()
            for find_all_src_videos in response_find_video['items']:
                find_src_video = (find_all_src_videos['player']['embedHtml'])
                find_elem = find_src_video
                soup = BeautifulSoup(find_elem, 'html.parser')
                find_src = soup.find('iframe').get('src')
                youtube_link = find_src.replace('//www.youtube.com/embed/', 'https://www.youtube.com/watch?v=')

                await msg.answer('üìå C—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ: ' + youtube_link + '\n' +
                                                    '\n'
                                 
                                 'üîñ –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: ' + info_video['Title:'] + '\n' +
                                                    '\n'
                                 
                                 'üìù –û–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ: ' + info_video['Description:'] + '\n' +
                                                    '\n'
                                 
                                 'üïê –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: ' + info_video['Published:'] + '\n'
                                 )
            time.sleep(3)
            await msg.answer('–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ')
            await msg.answer('–•–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ –∏–ª–∏ –ø–æ–∏—Å–∫–∞—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ ü§î\n'
                             '–¢–æ–≥–¥–∞ –≤—ã–±–µ—Ä–∏ –≤ –º–µ–Ω—é –∫–Ω–æ–ø–∫—É –∏ –∫–ª–∏–∫–∞–π üëá', reply_markup=search_keyboard)

            await state.finish()

        except Exception as ex:
            await msg.answer('–ü—Ä–æ—Å—Ç–∏—Ç–µ —è –Ω–∏—á–µ–≥–æ –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏...–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–µ—Å—Ç–∏ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ üôÅ')
            print(ex)
        finally:
            time.sleep(1)


@dp.callback_query_handler(lambda c: c.data == '–ù–æ–≤–∏–Ω–∫–∏')
async def new(new: types.CallbackQuery):
    await bot.answer_callback_query(new.id)
    await bot.send_message(new.from_user.id, 'üîπ –•–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã–µ –≤–∏–¥–µ–æ, —Ç–æ–≥–¥–∞ —Ç–µ–±–µ —Å—é–¥–∞ üîπ\n'
                                             '–ü—Ä–æ—Å—Ç–æ –≤–µ–¥–∏ –ª—é–±–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ, –∏ —è –Ω–∞—á–Ω—É –ø–æ–∏—Å–∫ üîé\n'
                                             'üìù –ù–∞–ø—Ä–∏–º–µ—Ä: "–ú–∞—Ä–≤–µ–ª" –∏–ª–∏ "–¢—Ä–µ–π–ª–µ—Ä —á–µ–ª–æ–≤–µ–∫–∞ –ø–∞—É–∫–∞ 2021"\n'
                                             'üìå –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≤—Å–µ–≥–æ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ 5 –≤–∏–¥–µ–æ')

    await Search.new_video.set()

    @dp.message_handler(state=Search.new_video)
    async def search_new_video(msg: types.Message, state: FSMContext):
        get_new_video = msg.text

        await state.update_data(new_video=get_new_video)
        data = await state.get_data()
        find_new_video = data.get('new_video')

        api_key = 'AIzaSyBXEyhLdBF9n1vTFg7mQPD-M4Zxk_RS-hI'
        youtube = build('youtube', 'v3', developerKey=api_key)
        try:
            request_search = youtube.search().list(
                part='id',
                q=find_new_video,
                order='date',
                type='video',
                maxResults='5'

            )
            save_id_videos = []

            response_search_video = request_search.execute()
            for all_video_get in response_search_video['items']:
                find_id_video = (all_video_get['id']['videoId'])
                save_id_videos.append(find_id_video)

            request_find_video = youtube.videos().list(
                part='player',
                id=save_id_videos
            )

            response_find_video = request_find_video.execute()

            for find_all_src_videos in response_find_video['items']:
                find_src_video = (find_all_src_videos['player']['embedHtml'])
                find_elem = find_src_video
                soup = BeautifulSoup(find_elem, 'html.parser')
                find_src = soup.find('iframe').get('src')
                youtube_link = find_src.replace('//www.youtube.com/embed/', 'https://www.youtube.com/watch?v=')
                await msg.answer('üìå –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ: ' + youtube_link)

            time.sleep(3)
            await msg.answer('–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ')
            await msg.answer('–•–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ –∏–ª–∏ –ø–æ–∏—Å–∫–∞—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ ü§î\n'
                             '–¢–æ–≥–¥–∞ –≤—ã–±–µ—Ä–∏ –≤ –º–µ–Ω—é –∫–Ω–æ–ø–∫—É –∏ –∫–ª–∏–∫–∞–π üëá',
                             reply_markup=search_keyboard)
            await state.finish()
        except Exception as ex:
            await msg.answer('–ü—Ä–æ—Å—Ç–∏—Ç–µ —è –Ω–∏—á–µ–≥–æ –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏...–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–µ—Å—Ç–∏ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ üôÅ')
            print(ex)
        finally:
            time.sleep(1)


@dp.callback_query_handler(lambda c: c.data == '–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ')
async def popular_video(msg_popular: types.CallbackQuery):
    await bot.answer_callback_query(msg_popular.id)
    await bot.send_message(msg_popular.from_user.id, 'üí† –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∏–¥–µ–æ üí†\n'
                                                     '–ü—Ä–æ—Å—Ç–æ –≤–µ–¥–∏ –ª—é–±–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ, –∏ —è –Ω–∞—á–Ω—É –ø–æ–∏—Å–∫ üîé\n'
                                                     'üìù –ù–∞–ø—Ä–∏–º–µ—Ä: "–í–¥—É–¥—å" –∏–ª–∏ "–§–∏–ª—å–º –ú–∞–π–æ—Ä –ì—Ä–æ–º"\n'
                                                     'üìå –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≤—Å–µ–≥–æ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ 5 –≤–∏–¥–µ–æ')

    await Search.popular_video.set()

    @dp.message_handler(state=Search.popular_video)
    async def search_popular_video(msg: types.Message, state: FSMContext):
        get_popular_video = msg.text

        await state.update_data(popular_video=get_popular_video)
        data = await state.get_data()
        find_popular_video = data.get('popular_video')

        api_key = 'AIzaSyBXEyhLdBF9n1vTFg7mQPD-M4Zxk_RS-hI'
        youtube = build('youtube', 'v3', developerKey=api_key)
        try:
            request_search = youtube.search().list(
                part='id',
                q=find_popular_video,
                order='viewCount',
                type='video',
                maxResults='5'

            )
            save_id_videos = []

            response_search_video = request_search.execute()
            for all_video_get in response_search_video['items']:
                find_id_video = (all_video_get['id']['videoId'])
                save_id_videos.append(find_id_video)

            request_find_video = youtube.videos().list(
                part='player',
                id=save_id_videos
            )

            response_find_video = request_find_video.execute()

            for find_all_src_videos in response_find_video['items']:
                find_src_video = (find_all_src_videos['player']['embedHtml'])
                find_elem = find_src_video
                soup = BeautifulSoup(find_elem, 'html.parser')
                find_src = soup.find('iframe').get('src')
                youtube_link = find_src.replace('//www.youtube.com/embed/', 'https://www.youtube.com/watch?v=')
                await msg.answer('üìå –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ: ' + youtube_link)

            time.sleep(3)
            await msg.answer('–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ')
            await msg.answer('–•–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ –∏–ª–∏ –ø–æ–∏—Å–∫–∞—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ ü§î\n'
                             '–¢–æ–≥–¥–∞ –≤—ã–±–µ—Ä–∏ –≤ –º–µ–Ω—é –∫–Ω–æ–ø–∫—É –∏ –∫–ª–∏–∫–∞–π üëá',
                             reply_markup=search_keyboard)

            await state.finish()
        except Exception as ex:
            await msg.answer('–ü—Ä–æ—Å—Ç–∏—Ç–µ —è –Ω–∏—á–µ–≥–æ –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏...–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–µ—Å—Ç–∏ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ üôÅ')
            print(ex)
        finally:
            time.sleep(1)


@dp.callback_query_handler(lambda c: c.data == '–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å')
async def support_me(msg_support: types.CallbackQuery):
    await bot.answer_callback_query(msg_support.id)
    await bot.send_message(msg_support.from_user.id, '–•–æ—á–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –º–µ–Ω—è, —Ç–æ–≥–¥–∞ –≤—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã üëá'
                                                     , reply_markup=payment_keyboard)


@dp.callback_query_handler(lambda c: c.data == 'PayPal')
async def paypal(msg_paypal: types.CallbackQuery):
    await bot.answer_callback_query(msg_paypal.id)
    await bot.send_message(msg_paypal.from_user.id, 'üëá –ö–ª–∏–∫–Ω–∏ –Ω–∞ —Å—Å—ã–ª–∫—É üëá\n'
                                                    'üìå my_paypal', reply_markup=search_keyboard)


@dp.callback_query_handler(lambda c: c.data == '–ÆMoney')
async def Youmoney(msg_youmoney: types.CallbackQuery):
    await bot.answer_callback_query(msg_youmoney.id)
    await bot.send_message(msg_youmoney.from_user.id, 'üëá –ö–ª–∏–∫–Ω–∏ –Ω–∞ —Å—Å—ã–ª–∫—É üëá\n'
                                                      'üìå my_youmoney',
                                                      reply_markup=search_keyboard)


if __name__ == '__main__':
    executor.start_polling(dp)
